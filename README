-------------------------------------------------------------------------------
Welcome to ixlib.
-------------------------------------------------------------------------------

Table of contents:
1. What is ixlib?
2. Installation
3. Implementation notes
4. FAQ
5. Documentation
6. TODO

URL:
	http://ixlib.sourceforge.net
Authors:
	Andreas Kloeckner <ak@ixion.net>, Hardy Kahl <hk@ixion.net>

-------------------------------------------------------------------------------
1. What is ixlib?
-------------------------------------------------------------------------------

ixlib is a small c++ tools library based upon the standard template library.
It provides 

* an exception handling framework [ixlib_exbase.hh]
* garbage collection [ixlib_garbage.hh]
* automatic array management [ixlib_array.hh]
* planar geometry (rectangles, regions) [ixlib_geometry.hh]
  polygons (rasterization, convex hull, smoothing, removal of crossings) 
  [ixlib_polygon.hh]
  rasterization [ixlib_drawing_functions.hh]
* matrices (including linear system solver, Cholesky and LU decomposition,
  determinants, inversion, Gauss and Gauss-Jordan elimination)
  [ixlib_matrix.hh]
* command line parsing [ixlib_cmdline.hh]
* versatile int <-> string conversions [ixlib_numconv.hh]
* regular expressions [ixlib_re.hh]
* xml parsing (non-DTD) [ixlib_xml.hh]

Some of the guidelines I tried to follow are:

* use a separate namespace "ixion"
* try to be STL-lookalike
* no unnecessary dependencies: you pay only for those parts that you use
  (pay means: in terms of disk space, execution time)

Furthermore, every component of ixlib has been thoroughly tested
and is considered production-quality code. Almost all of the interfaces
are frozen.

-------------------------------------------------------------------------------
2. Installation
-------------------------------------------------------------------------------

The usual

configure [--disable-static] [--enable-debug]
make
make check
make install

should do the trick. You can skip the "make check" parts if you do not
want to run the regression tests.

ixlib currently depends on
* a good c++ compiler (gcc 2.95 will do)
* the SGI STL (i.e. an STL implementation containing a "hash_map")
  (normally included with your c++ compiler, e.g. gcc)
* flex

-------------------------------------------------------------------------------
3. Implementation notes
-------------------------------------------------------------------------------

Using ixlib is as easy as abc. To compile, just type

c++ -c my_program.cc `ixlib-config --cflags`

To link, type

c++ my_program.o -o my_program `ixlib-config --libs`

One word on the usage of the templates. In order to avoid incurring the
overhead of compiling/inlining every included template into every source file,
the following scheme is used: The declaration goes into a ixlib_*.hh
file, and the corresponding implementation goes into ixlib_*_impl.hh.
This implementation does not inline by default, so you will use the following
in *one* of your c++ files for every type you desire instantiation for:

#include <ixlib_foo_impl.hh>

template foo_class<int>; // explicit instation for ints

-------------------------------------------------------------------------------
4. FAQ
-------------------------------------------------------------------------------
Q: Hey, you seem to have forgotten all of the implementation?

A: No I haven't. Look in ixlib_*_impl.hh. See also (3).

-------------------------------------------------------------------------------
5. Documentation
-------------------------------------------------------------------------------

ixlib tries to be very much self-documenting. Unless there's bitter need for
it, I do not plan on writing documentation. However, I'd be glad to include
any documentation or questions from other people (hint,hint).

-------------------------------------------------------------------------------
6. TODO
-------------------------------------------------------------------------------
* ref's and polymorphism? I'd like to allow something like
  
  ref<superclass> u = ...
  ref<subclass> v = u;
  
  This is impossible with the current garbage collector/refcounter,
  which is silly. Anyone?

* convert matrix to refs.

* csg on polygons