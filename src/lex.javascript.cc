#define yyFlexLexer jsFlexLexer

#line 4 "lex.javascript.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#define FLEX_DEBUG

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 79
#define YY_END_OF_BUFFER 80
static yyconst short int yy_acclist[231] =
    {   0,
       80,   79,   78,   79,   26,   79,   79,   21,   79,   23,
       79,   79,   13,   79,   14,   79,   19,   79,   17,   79,
       30,   79,   18,   79,   31,   79,   20,   79,   74,   79,
       74,   79,   16,   79,   10,   79,   28,   79,   27,   79,
       29,   79,   15,   79,   77,   79,   11,   79,   12,   79,
       22,   79,   77,   79,   77,   79,   77,   79,   77,   79,
       77,   79,   77,   79,   77,   79,   77,   79,   77,   79,
       77,   79,   77,   79,   77,   79,   77,   79,    8,   79,
       24,   79,    9,   79,   25,   79,    3,   79,    4,   79,
        3,   79,    7,   79,    6,   79,    6,    7,   79,   78,

       47,   76,   36,   50,   38,   76,   34,   52,   32,   53,
       33,   75,    1,    5,   35,   75,   74,   74,   40,   48,
       46,   49,   41,   77,   37,   77,   77,   77,   77,   61,
       77,   77,   77,   77,   77,   59,   77,   73,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   39,   51,
        2,    6,   45,   75,   74,   42,   44,   43,   77,   77,
       77,   77,   77,   77,   63,   77,   77,   54,   77,   77,
       77,   77,   77,   77,   77,   57,   77,   77,   75,   77,
       66,   77,   77,   77,   62,   77,   77,   77,   58,   77,
       77,   77,   55,   77,   70,   77,   77,   77,   68,   77,

       77,   77,   71,   77,   77,   77,   77,   77,   60,   77,
       77,   77,   77,   64,   77,   65,   77,   77,   77,   69,
       77,   77,   77,   67,   77,   56,   77,   77,   72,   77
    } ;

static yyconst short int yy_accept[193] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    5,
        7,    8,   10,   12,   13,   15,   17,   19,   21,   23,
       25,   27,   29,   31,   33,   35,   37,   39,   41,   43,
       45,   47,   49,   51,   53,   55,   57,   59,   61,   63,
       65,   67,   69,   71,   73,   75,   77,   79,   81,   83,
       85,   87,   89,   91,   93,   95,   97,  100,  101,  102,
      102,  103,  103,  104,  105,  106,  106,  107,  107,  108,
      109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
      118,  118,  118,  119,  120,  121,  122,  123,  124,  125,
      126,  127,  128,  129,  130,  132,  133,  134,  135,  136,

      138,  140,  141,  142,  143,  144,  145,  146,  147,  148,
      149,  150,  151,  152,  153,  154,  154,  154,  154,  154,
      154,  154,  155,  156,  157,  158,  159,  160,  161,  162,
      163,  164,  165,  167,  168,  170,  171,  172,  173,  174,
      175,  176,  178,  179,  179,  179,  179,  179,  179,  180,
      181,  183,  184,  185,  187,  188,  189,  191,  192,  193,
      195,  197,  198,  199,  199,  199,  199,  199,  201,  202,
      203,  205,  206,  207,  208,  209,  211,  212,  213,  214,
      216,  218,  219,  220,  222,  223,  224,  226,  228,  229,
      231,  231

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   20,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   27,   27,   27,   28,   27,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   30,   29,   29,
       31,   32,   33,   34,   29,    1,   35,   36,   37,   38,

       39,   40,   29,   41,   42,   29,   43,   44,   29,   45,
       46,   29,   29,   47,   48,   49,   50,   51,   52,   53,
       29,   29,   54,   55,   56,   57,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[58] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    4,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    6,
        1,    1,    1,    1,    1,    4,    6,    6,    7,    7,
        1,    4,    1,    1,    5,    5,    6,    6,    6,    5,
        7,    7,    7,    7,    8,    7,    8,    7,    8,    7,
        8,    7,    8,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[202] =
    {   0,
        0,    0,   55,   56,   57,   59,  357,  358,   62,  332,
       63,  331,   62,   62,  358,  358,  330,   59,  358,   58,
       56,   67,   69,   82,  358,  358,   54,  329,   56,  358,
        0,  358,  358,  328,  304,   57,   65,  306,   70,   67,
       67,  310,  296,   49,  302,  311,  304,  358,   69,  358,
      358,  358,  358,  327,  358,  110,  115,  123,  319,  103,
      358,  110,  358,  358,  358,  106,  114,  112,  358,  358,
      358,  358,  358,  114,  358,  358,  358,  121,  136,  150,
      161,    0,  166,  318,  358,  317,  358,  316,    0,  358,
      300,  283,  285,  285,    0,  276,  267,  263,  257,    0,

        0,  226,  233,  226,  232,  231,  220,  231,  221,  225,
      358,  358,  358,  133,  358,  139,    0,  174,    0,  182,
      189,  192,    0,  358,  358,  358,  231,  226,  212,  225,
      220,  210,    0,  220,    0,  211,  204,  197,  197,  204,
      203,    0,  197,  185,  212,  204,  244,  196,  201,  195,
        0,  195,  185,    0,  195,  180,    0,  181,  190,    0,
        0,  186,  186,  141,  145,  135,  224,    0,  179,  155,
        0,  156,  151,  149,  146,    0,  137,  123,  116,    0,
        0,  116,  120,    0,  105,  109,    0,    0,  105,    0,
      358,  284,  292,  300,  308,  312,  318,  324,  328,  330,

      332
    } ;

static yyconst short int yy_def[202] =
    {   0,
      191,    1,  192,  192,  193,  193,  191,  191,  191,  191,
      194,  191,  191,  195,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      196,  191,  191,  191,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  194,
      191,  197,  191,  191,  191,  195,  195,  198,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  199,  191,  191,  191,  191,  191,  191,  196,  191,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,

      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      191,  191,  191,  191,  191,  194,  200,  195,  201,  191,
      191,  191,  199,  191,  191,  191,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  194,  194,  195,  195,  191,  191,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  194,  194,  195,  195,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
        0,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191
    } ;

static yyconst short int yy_nxt[416] =
    {   0,
        8,    9,    9,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   24,
       25,   26,   27,   28,   29,   30,   31,   31,   31,   31,
       32,    8,   33,   34,   31,   35,   36,   37,   38,   39,
       31,   40,   31,   31,   41,   31,   42,   43,   44,   45,
       46,   47,   31,   48,   49,   50,   51,   53,   53,   56,
       57,   56,   57,   58,   58,   58,   54,   54,   61,   64,
       67,   70,   72,   74,   74,   74,   84,   85,   75,   87,
       88,   73,   71,   76,   78,   65,   79,   79,   80,  106,
       77,   92,  111,   68,   62,  107,   81,   78,   82,   83,

       83,   83,   93,   94,   97,  102,  100,   81,   61,   81,
       95,  101,  114,  114,   67,   98,  103,  114,  114,   99,
       81,   82,   67,  112,   58,   58,   58,  116,  116,  118,
      118,   74,   74,   74,   62,  114,  114,   68,   74,   74,
       74,  120,  190,   67,   61,   68,   61,  189,  120,  188,
       61,   78,  120,   79,   79,   80,  144,  144,  187,  120,
      186,  185,  117,   81,  119,   78,   68,   80,   80,   80,
       62,  184,   62,  121,   81,  121,   62,   81,  122,  122,
      122,   78,   67,   83,   83,   83,  183,  182,   81,  181,
       61,  146,  146,   81,  148,  180,  148,  179,  178,  149,

      149,  149,  164,  164,   81,   68,  122,  122,  122,  122,
      122,  122,   67,  149,  149,  149,   62,   61,  149,  149,
      149,  166,  166,  177,  176,  175,  174,  173,  172,  165,
      165,  165,   67,  171,  170,   68,  169,  168,  165,  165,
      163,  162,  161,   62,  160,  159,  165,  165,  165,  165,
      165,  165,   67,  158,  157,   68,  156,  155,  154,  153,
      152,  167,  167,  167,  151,  150,  143,  142,  141,  140,
      167,  167,  139,  138,  137,   68,  136,  135,  167,  167,
      167,  167,  167,  167,   52,   52,   52,   52,   52,   52,
       52,   52,   55,   55,   55,   55,   55,   55,   55,   55,

       60,  134,   60,   60,   60,   60,   60,   60,   66,  133,
      132,   66,   66,   66,   66,   66,   89,   89,   89,   89,
       60,   60,   60,  131,  130,   60,   66,   66,   66,  129,
      128,   66,  123,  123,  145,  145,  147,  147,  127,  126,
      125,  124,  115,  113,  110,  109,  108,  105,  104,   96,
       91,   90,   86,   69,   63,   59,  191,    7,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191
    } ;

static yyconst short int yy_chk[416] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    5,
        5,    6,    6,    9,    9,    9,    3,    4,   11,   13,
       14,   18,   20,   21,   21,   21,   27,   27,   22,   29,
       29,   20,   18,   22,   23,   13,   23,   23,   23,   44,
       22,   36,   49,   14,   11,   44,   23,   24,   23,   24,

       24,   24,   36,   37,   39,   41,   40,   23,   60,   24,
       37,   40,   56,   56,   66,   39,   41,   57,   57,   39,
       24,   23,   67,   49,   58,   58,   58,   62,   62,   68,
       68,   74,   74,   74,   60,  114,  114,   66,   78,   78,
       78,   74,  189,  166,  116,   67,  164,  186,   78,  185,
      165,   79,   74,   79,   79,   79,  116,  116,  183,   78,
      182,  179,   62,   79,   68,   80,  166,   80,   80,   80,
      116,  178,  164,   81,   79,   81,  165,   80,   81,   81,
       81,   83,  118,   83,   83,   83,  177,  175,   80,  174,
      144,  118,  118,   83,  120,  173,  120,  172,  170,  120,

      120,  120,  144,  144,   83,  118,  121,  121,  121,  122,
      122,  122,  146,  148,  148,  148,  144,  145,  149,  149,
      149,  146,  146,  169,  163,  162,  159,  158,  156,  145,
      145,  145,  167,  155,  153,  146,  152,  150,  145,  145,
      143,  141,  140,  145,  139,  138,  145,  145,  145,  145,
      145,  145,  147,  137,  136,  167,  134,  132,  131,  130,
      129,  147,  147,  147,  128,  127,  110,  109,  108,  107,
      147,  147,  106,  105,  104,  147,  103,  102,  147,  147,
      147,  147,  147,  147,  192,  192,  192,  192,  192,  192,
      192,  192,  193,  193,  193,  193,  193,  193,  193,  193,

      194,   99,  194,  194,  194,  194,  194,  194,  195,   98,
       97,  195,  195,  195,  195,  195,  196,  196,  196,  196,
      197,  197,  197,   96,   94,  197,  198,  198,  198,   93,
       92,  198,  199,  199,  200,  200,  201,  201,   91,   88,
       86,   84,   59,   54,   47,   46,   45,   43,   42,   38,
       35,   34,   28,   17,   12,   10,    7,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191
    } ;

static yyconst short int yy_rule_linenum[79] =
    {   0,
       71,   72,   74,   75,   76,   77,   78,   82,   83,   84,
       86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
       96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
      106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
      116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
      126,  127,  128,  130,  132,  133,  134,  135,  136,  137,
      138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
      148,  149,  150,  152,  153,  154,  156,  158
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lex.javascript.yy"
#define INITIAL 0
/* -------- definitions ------- */
#line 6 "lex.javascript.yy"
#include <ixlib_javascript.hh>
#include <ixlib_token_javascript.hh>
/* higher-level entities ------------------------------------------------------
*/
/* literals -------------------------------------------------------------------
*/
/* Contexts -------------------------------------------------------------------
*/
#define Comment 1

#define LineComment 2

/* Rules ----------------------------------------------------------------------
*/
#line 554 "lex.javascript.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 69 "lex.javascript.yy"


#line 684 "lex.javascript.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 192 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 358 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				cerr << "--scanner backing up\n";
			else if ( yy_act < 79 )
				cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 79 )
				cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 80 )
				cerr << "--(end of buffer or a NUL)\n";
			else
				cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 71 "lex.javascript.yy"
BEGIN(Comment);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 72 "lex.javascript.yy"
BEGIN(INITIAL);
	YY_BREAK
case YY_STATE_EOF(Comment):
#line 73 "lex.javascript.yy"
EXJS_THROW(ECJS_UNTERMINATED_COMMENT)
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 74 "lex.javascript.yy"
/* nothing */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 75 "lex.javascript.yy"
/* nothing */
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "lex.javascript.yy"
BEGIN(LineComment);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "lex.javascript.yy"
BEGIN(INITIAL);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "lex.javascript.yy"
/* nothing */
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LineComment):
#line 80 "lex.javascript.yy"
return TT_EOF;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 82 "lex.javascript.yy"
return '{';
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 83 "lex.javascript.yy"
return '}';
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 84 "lex.javascript.yy"
return ';';
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 86 "lex.javascript.yy"
return '[';
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 87 "lex.javascript.yy"
return ']';
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 88 "lex.javascript.yy"
return '(';
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 89 "lex.javascript.yy"
return ')';
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 90 "lex.javascript.yy"
return '?';
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 91 "lex.javascript.yy"
return ':';
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 92 "lex.javascript.yy"
return '+';
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 93 "lex.javascript.yy"
return '-';
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 94 "lex.javascript.yy"
return '*';
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 95 "lex.javascript.yy"
return '/';
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 96 "lex.javascript.yy"
return '%';
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 97 "lex.javascript.yy"
return '^';
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 98 "lex.javascript.yy"
return '&';
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 99 "lex.javascript.yy"
return '|';
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 100 "lex.javascript.yy"
return '~';
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 101 "lex.javascript.yy"
return '!';
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 102 "lex.javascript.yy"
return '=';
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 103 "lex.javascript.yy"
return '<';
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 104 "lex.javascript.yy"
return '>';
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 105 "lex.javascript.yy"
return ',';
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 106 "lex.javascript.yy"
return '.';
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 107 "lex.javascript.yy"
return TT_JS_PLUS_ASSIGN;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 108 "lex.javascript.yy"
return TT_JS_MINUS_ASSIGN;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 109 "lex.javascript.yy"
return TT_JS_MULTIPLY_ASSIGN;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 110 "lex.javascript.yy"
return TT_JS_DIVIDE_ASSIGN;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 111 "lex.javascript.yy"
return TT_JS_MODULO_ASSIGN;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 112 "lex.javascript.yy"
return TT_JS_BIT_XOR_ASSIGN;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 113 "lex.javascript.yy"
return TT_JS_BIT_AND_ASSIGN;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 114 "lex.javascript.yy"
return TT_JS_BIT_OR_ASSIGN;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 115 "lex.javascript.yy"
return TT_JS_LEFT_SHIFT;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 116 "lex.javascript.yy"
return TT_JS_RIGHT_SHIFT;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 117 "lex.javascript.yy"
return TT_JS_LEFT_SHIFT_ASSIGN;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 118 "lex.javascript.yy"
return TT_JS_RIGHT_SHIFT_ASSIGN;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 119 "lex.javascript.yy"
return TT_JS_IDENTICAL;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 120 "lex.javascript.yy"
return TT_JS_NOT_IDENTICAL;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "lex.javascript.yy"
return TT_JS_EQUAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 122 "lex.javascript.yy"
return TT_JS_NOT_EQUAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "lex.javascript.yy"
return TT_JS_LESS_EQUAL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 124 "lex.javascript.yy"
return TT_JS_GREATER_EQUAL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 125 "lex.javascript.yy"
return TT_JS_LOGICAL_AND;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 126 "lex.javascript.yy"
return TT_JS_LOGICAL_OR;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 127 "lex.javascript.yy"
return TT_JS_INCREMENT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 128 "lex.javascript.yy"
return TT_JS_DECREMENT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 130 "lex.javascript.yy"
return TT_JS_NEW;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 132 "lex.javascript.yy"
return TT_JS_THIS;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 133 "lex.javascript.yy"
return TT_JS_FUNCTION;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 134 "lex.javascript.yy"
return TT_JS_VAR;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 135 "lex.javascript.yy"
return TT_JS_NULL;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 136 "lex.javascript.yy"
return TT_JS_IF;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 137 "lex.javascript.yy"
return TT_JS_WHILE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 138 "lex.javascript.yy"
return TT_JS_DO;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 139 "lex.javascript.yy"
return TT_JS_ELSE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 140 "lex.javascript.yy"
return TT_JS_FOR;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 141 "lex.javascript.yy"
return TT_JS_RETURN;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 142 "lex.javascript.yy"
return TT_JS_SWITCH;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 143 "lex.javascript.yy"
return TT_JS_CASE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 144 "lex.javascript.yy"
return TT_JS_CONTINUE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 145 "lex.javascript.yy"
return TT_JS_BREAK;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 146 "lex.javascript.yy"
return TT_JS_DEFAULT;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 147 "lex.javascript.yy"
return TT_JS_LIT_TRUE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 148 "lex.javascript.yy"
return TT_JS_LIT_FALSE;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 149 "lex.javascript.yy"
return TT_JS_LIT_UNDEFINED;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 150 "lex.javascript.yy"
return TT_JS_IN;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 152 "lex.javascript.yy"
return TT_JS_LIT_INT;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 153 "lex.javascript.yy"
return TT_JS_LIT_FLOAT;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 154 "lex.javascript.yy"
return TT_JS_LIT_STRING;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 156 "lex.javascript.yy"
return TT_JS_IDENTIFIER;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 158 "lex.javascript.yy"
/* nothing */
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 159 "lex.javascript.yy"
ECHO;
	YY_BREAK
#line 1193 "lex.javascript.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 192 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 192 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 191);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 159 "lex.javascript.yy"
